<?php

declare(strict_types=1);

namespace App\Tests\Components\UserRegister\Business\Model;

use App\Components\User\Persistence\DTOs\ErrorsDTO;
use App\Components\User\Persistence\Mapper\ErrorMapper;
use App\Components\UserRegister\Business\Model\UserRegisterValidation;
use App\Components\UserRegister\Business\Model\ValidationTypesRegister\EmailValidation;
use App\Components\UserRegister\Business\Model\ValidationTypesRegister\FirstNameValidation;
use App\Components\UserRegister\Business\Model\ValidationTypesRegister\LastNameValidation;
use App\Components\UserRegister\Business\Model\ValidationTypesRegister\PasswordValidation;
use App\Components\UserRegister\Persistence\DTO\UserRegisterDto;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class UserRegisterValidationTest extends TestCase
{

    private MockObject $firstNameValidation;
    private MockObject $lastNameValidation;
    private MockObject $emailValidation;
    private MockObject $passwordValidation;
    private MockObject $errorMapper;
    private UserRegisterValidation $userRegisterValidation;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        $this->firstNameValidation = $this->createMock(FirstNameValidation::class);
        $this->lastNameValidation = $this->createMock(LastNameValidation::class);
        $this->emailValidation = $this->createMock(EmailValidation::class);
        $this->passwordValidation = $this->createMock(PasswordValidation::class);
        $this->errorMapper = $this->createMock(ErrorMapper::class);
        $this->userRegisterValidation = new UserRegisterValidation(
            $this->errorMapper,
            $this->firstNameValidation,
            $this->lastNameValidation,
            $this->emailValidation,
            $this->passwordValidation
        );
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }

    public function testGetErrors(): void
    {
        $userRegisterDto = new UserRegisterDto();
        $expectedErrorsDTO = new ErrorsDTO('First name error', 'Last name error', 'Email error', 'Password error');
        $this->firstNameValidation->method('validateInput')->willReturn('First name error');
        $this->lastNameValidation->method('validateInput')->willReturn('Last name error');
        $this->emailValidation->method('validateInput')->willReturn('Email error');
        $this->passwordValidation->method('validateInput')->willReturn('Password error');

        $userRegisterDto->email = "trst@g.com";
        $userRegisterDto->firstName = "John";
        $userRegisterDto->lastName = "Doe";
        $userRegisterDto->password = "1234";

        $this->errorMapper->method('arrayToDto')->willReturn($expectedErrorsDTO);

        $errorsDto = $this->userRegisterValidation->userRegisterGetErrorsDTO($userRegisterDto);
        self::assertInstanceOf(ErrorsDTO::class, $errorsDto);
        self::assertNotEmpty($errorsDto->emailError);
        self::assertNotEmpty($errorsDto->passwordError);
        self::assertNotEmpty($errorsDto->firstNameEmptyError);
        self::assertNotEmpty($errorsDto->lastNameEmptyError);
    }

    public function testValidateNoErrors(): void
    {
        $expectedErrorsDTO = new ErrorsDTO(
            'First name error',
            'Last name error',
            'Email error',
            'Password error'
        );

        $result = $this->userRegisterValidation->validateNoErrors($expectedErrorsDTO);
        self::assertFalse($result);
    }

    public function testValidateNoErrorsFalse(): void
    {
        $expectedErrorsDTO = new ErrorsDTO(
            null,
            null,
            null,
            null
        );

        $result = $this->userRegisterValidation->validateNoErrors($expectedErrorsDTO);
        self::assertTrue($result);
    }
}