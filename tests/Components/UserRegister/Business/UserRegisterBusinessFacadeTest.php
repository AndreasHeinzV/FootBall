<?php

declare(strict_types=1);

namespace App\Tests\Components\UserRegister\Business;

use App\Components\User\Persistence\DTOs\ErrorsDTO;
use App\Components\UserRegister\Business\Model\Register;
use App\Components\UserRegister\Business\UserRegisterBusinessFacade;
use App\Components\UserRegister\Persistence\DTO\UserRegisterDto;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class UserRegisterBusinessFacadeTest extends TestCase
{

    private UserRegisterBusinessFacade $businessFacade;
    private MockObject $registerMock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->registerMock = $this->createMock(Register::class);
        $this->businessFacade = new UserRegisterBusinessFacade($this->registerMock);
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }

    public function testRegisterUserExpectNull(): void
    {
        $this->registerMock->method('execute')->willReturn(null);
        $userRegisterDto = new UserRegisterDto();
        $result = $this->businessFacade->registerUserNew($userRegisterDto);

        self::assertNull($result);
    }

    public function testRegisterUserExpectErrorDto(): void
    {
        $this->registerMock->method('execute')->willReturn(new ErrorsDTO('', '', '', ''));
        $userRegisterDto = new UserRegisterDto();
        $result = $this->businessFacade->registerUserNew($userRegisterDto);

        self::assertInstanceOf(ErrorsDTO::class,$result);
    }
}